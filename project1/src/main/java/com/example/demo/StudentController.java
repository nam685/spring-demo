package com.example.demo;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
@RequestMapping(path="/student")
public class StudentController {
	@Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
	private StudentRepository studentRepository;
	
	@GetMapping("/")
	public @ResponseBody Iterable<Student> getAllStudents() {
		return studentRepository.findAll();
	}
	
	@GetMapping("/{id}")
	public @ResponseBody Student getStudentByID(@PathVariable("id") int id) {
		Optional<Student> find = studentRepository.findById(id);
		if (find.isEmpty()) {
			return null;
		}
		else {
			return find.get();
		}
	}
	
	/* return students who have the searched word in their first name or last name */
	@GetMapping("/byName")
	public @ResponseBody Iterable<Student> getStudentByName(
			@RequestParam(value="search", required=true) String search) {
		return studentRepository.findByFirstOrLastName(search);
	}
	
	@PutMapping("/add")
	public @ResponseBody String addStudent(
			@RequestParam(value="firstName", required=true) String firstName,
			@RequestParam(value="lastName", required=true) String lastName,
			@RequestParam(value="dateOfBirth", required=true) String dateOfBirth
			) {
		Student n = new Student();
		n.setFirstName(firstName);
		n.setLastName(lastName);
		n.setDateOfBirth(dateOfBirth);
		studentRepository.save(n);
		return "Saved";
	}
	
	@PostMapping("/update")
	public @ResponseBody String updateStudent(
			@RequestParam(value="id", required=true) int id,
			@RequestParam(value="firstName", required=true) String firstName,
			@RequestParam(value="lastName", required=true) String lastName,
			@RequestParam(value="dateOfBirth", required=true) String dateOfBirth
			) {
		Optional<Student> find = studentRepository.findById(id);
		if (find.isEmpty()) {
			return "Not found. Update failed";
		}
		else {
			Student s = find.get();
			s.setFirstName(firstName);
			s.setLastName(lastName);
			s.setDateOfBirth(dateOfBirth);
			studentRepository.save(s);
			return "Updated";
		}
	}
}
